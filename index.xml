<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BATTLE - kuper&#39;s blog</title>
    <link>https://kuperxu.github.io/</link>
    <description>Recent content on BATTLE - kuper&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://kuperxu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://kuperxu.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://kuperxu.github.io/about/</guid>
      
        <description>&lt;h1 id=&#34;破山中贼易破心中贼难&#34;&gt;破山中贼易，破心中贼难。&lt;/h1&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS Device Checkm8</title>
      <link>https://kuperxu.github.io/post/ios-checkm8-all/</link>
      <pubDate>Sun, 29 Sep 2019 11:42:22 +0800</pubDate>
      
      <guid>https://kuperxu.github.io/post/ios-checkm8-all/</guid>
      
        <description>&lt;h2 id=&#34;checkm8&#34;&gt;checkm8&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Checkm8 iPhone上的史诗级硬件漏洞，能够让iPhone 4s到iPhone X实现永久越狱，且无法修补。&lt;a href=&#34;https://github.com/axi0mX/ipwndfu&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;关于越狱&#34;&gt;关于越狱&lt;/h3&gt;
&lt;p&gt;越狱breakjail：使用户设备获得超级管理员权限，拥有对系统底层的读写权限。绕过苹果的安全监测安装非签名的APP、自定义系统。关注越狱动态可以看&lt;a href=&#34;https://www.reddit.com/r/jailbreak/&#34;&gt;reddit论坛&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/32766546&#34;&gt;详细越狱原理介绍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;越狱是利用了两个漏洞.&lt;/strong&gt;
bootrom漏洞：在bootrom期间完成漏洞利用。他不能通过传统的固件更新来修补，必须由新硬件修补。由于漏洞在启动环节发生的很早，而且漏洞Payload拥有对硬件的全部读取权限。 如它可以利用AES硬件引擎的GID密码来解密IMG3文件，而IMG3文件允许解密新的iOS更新。由于他几乎在任何检查点之前，恶意代码在所有事情之前被注入，因此允许创建通道以绕过所有检查或者简单地禁用他们。&lt;/p&gt;
&lt;p&gt;用户空间漏洞：在内核加载期间或之后完成漏洞利用，并且可以通过软件更新轻松的被Apple修补。由于这是所有的检查，它将恶意代码直接注入到内核中。这些开口不是很容易找到，一旦发现可以修补。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/c5c22f9a06e2&#34;&gt;https://www.jianshu.com/p/c5c22f9a06e2&lt;/a&gt; ..完美越狱非完美越狱&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个人都知道的默认密码&lt;/strong&gt;
关于iOS最严重的秘密之一就是它的root密码“alpine”。每个人都知道，苹果也不打算改变它。使用root密码给用户访问设备的核心功能，如果落入不法之徒，这可能是灾难性的。&lt;/p&gt;
&lt;p&gt;幸运的是，这个密码可以从一个shell应用程序中更改，但是后期的破解者经常忘记这样做，从而使他们的设备面临漏洞。&lt;/p&gt;
&lt;h2 id=&#34;主角checkm8&#34;&gt;主角Checkm8&lt;/h2&gt;
&lt;p&gt;原理：利用bootrom漏洞进行的越狱。该漏洞是针对iPad或iPhone上启动ROM的某个向量指针。&lt;/p&gt;
&lt;p&gt;价值：bootrom漏洞的特性：不可修复，可玩性高。从而可以得出以此设备可以刷任何版本的固件，当然包含降级，甚至可以刷安卓，还可以做远程调试。
影响：对普通消费者杀伤性几乎为零，生效条件严格：用数据线和电脑连接，设备进入DFU mode。因破解是通过启动ROM的向量指针，并非是撬开iOS系统，因此是非完美越狱，这意味着每次重新启动iPhone时，攻击媒介都会再次关闭。理论上不会被APT攻击装一个持久化的后门(有待分析)。&lt;/p&gt;
&lt;p&gt;PS:APT即高级可持续威胁攻击,也称为定向威胁攻击，指某组织对特定对象展开的持续有效的攻击活动。 这种攻击活动具有极强的隐蔽性和针对性,通常会运用受感染的各种介质、供应链和社会工程学等多种手段实施先进的、持久的且有效的威胁和攻击。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考：漏洞公布的时间点很值得考量，iPhone 11刚刚发布完成，这时发表声明3GS-iPhone X所有设备都有不可修复问题，新机XS及11是没问题的，是苹果的压迫还是说出售新机kpi的任务难以完成，当然这些各抒己见。不过从漏洞提出者的Git声明上可以看出“axi0mX觉得自己不是第一个发现这个问题的人，该漏洞很可能已经被一些其他公司利用了”。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS Crash 分析</title>
      <link>https://kuperxu.github.io/post/ios-crash-analysis/</link>
      <pubDate>Wed, 04 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>https://kuperxu.github.io/post/ios-crash-analysis/</guid>
      
        <description>&lt;p&gt;未处理的异常或信号导致的意外退出，会使应用崩溃。身为攻城狮在编码时避免crash的发生是很重要的素养。但不代表解决Crash的能力不重要。&lt;/p&gt;
&lt;h2 id=&#34;what-crash-is&#34;&gt;What Crash Is&lt;/h2&gt;
&lt;p&gt;数据上报中有完整的堆栈时我们可根据代码来分析出Crash原因，进行修正。当堆栈中出现了系统堆栈或是堆栈并不完整，我们应该如何分析，以下对此情况进行分析讨论。&lt;/p&gt;
&lt;h2 id=&#34;寄存器&#34;&gt;寄存器&lt;/h2&gt;
&lt;p&gt;处理系统堆栈或是堆栈不完整的上报时，我们需要关注寄存器的信息。寄存器讨论针对ARM64架构下。iOS下大抵包含两类寄存器。&lt;/p&gt;
&lt;p&gt;1.&lt;code&gt;r0 - r30&lt;/code&gt; 31个通用整形寄存器，寄存器大小为64位。没有名为X31或W31的寄存器。 一些指令被编码了，以使数字31代表零寄存器ZR（WZR / XZR）。 还有一组受限制的指令，其中一个或多个参数被编码，以使数字31代表堆栈指针（SP）。
2.&lt;code&gt;V0 - V31&lt;/code&gt; 32个向量寄存器，也就是是浮点型寄存器，寄存器大小为128位。&lt;/p&gt;
&lt;p&gt;其中关于一些寄存器代表的信息中：x29就是FP, x30就是LR，这里会有人指出x31代表着SP寄存器上面也有解释，这只是个代号实际上并无x31寄存器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SP（Stack Pointer）栈顶寄存器，指向栈顶也就是低地址。在指令编码中，使用 SP/WSP来进行对SP寄存器的访问。&lt;/li&gt;
&lt;li&gt;FP（Frame pointer）栈底寄存器，指向栈底也就是高地址。&lt;/li&gt;
&lt;li&gt;PC（Program Counter）程序计数器，存的是当前执行的指令的地址。在arm64中，软件是不能改写PC寄存器的。&lt;/li&gt;
&lt;li&gt;LR (link register) 链接寄存器，当调用函数时，返回地址即PC的值被保存到LR中。&lt;/li&gt;
&lt;li&gt;SPSR 状态寄存器，用于存放程序运行中一些状态标识。不同于编程语言里面的if else.在汇编中就需要根据状态寄存器中的一些状态来控制分支的执行。状态寄存器又分为 The Current Program Status Register (CPSR) 和 The Saved Program Status Registers (SPSRs)。 一般都是使用CPSR， 当发生异常时， CPSR会存入SPSR。当异常恢复，再拷贝回CPSR。&lt;/li&gt;
&lt;li&gt;CPSR (current program status register) 程序状态寄存器。cpsr在用户级编程时用于存储条件码；CPSR包含条件码标志，中断禁止位，当前处理器模式以及其他状态和控制信息。&lt;/li&gt;
&lt;li&gt;ESR/FAR 异常寄存器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;iOS调用惯例，调用惯例即编译约定好的参数和返回值的存取顺序。调用惯例可以随 &lt;strong&gt;attribute&lt;/strong&gt;((cdecl))，设置而改变。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参数:一般来讲ARM64的机型 x0 – x7 分别会存放方法的前 8 个参数。如果是iOS的方法调用，x0、x1会分别保留隐藏参数self &amp;amp; _cmd.如果参数个数超过了8个，多余的参数会存在栈上，新方法会通过栈来读取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法的返回值:一般都在 x0 上，如果方法返回值是一个较大的数据结构时，结果会存在 x8 执行的地址上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于详细的iOS函数调用时各寄存器的作用可见文章&lt;a href=&#34;https://blog.cnbluebox.com/blog/2017/07/24/arm64-start/&#34;&gt;iOS函数调用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了这些知识我们就可以通过crash时寄存器的值来获取更多的有用信息，crash的一次寄存器信息如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Thread 0 crashed with ARM 64 Thread State:
     x0:  0x000000013555e980    x1: 0x000000024582c242    x2: 0x000000012e270df0     x3: 0x0000000000000040
     x4:  0x000000012e270e40    x5: 000000000000000000    x6: 0x0000000000000062     x7: 0x00000000000001a0
     x8:  0x0000000000000230    x9: 0x0000000114cc7f40   x10: 0x000000011107ca00    x11: 0x00000078000000ff
    x12: 0x0000000354856a04    x13: 0x200000001355ba12   x14: 0x0000000000000006    x15: 0x0000000000000001
    x16: 0x000000001355ba10    x17: 0x001a750217da5dc4   x18: 000000000000000000    x19: 0x0000000134a5d4a0
    x20: 0x000000024582c242    x21: 0x000000010aac7e5f   x22: 0x0000000106526568    x23: 0x0000000107617000
    x24: 0x00000002521cf000    x25: 0x00000002521cf000   x26: 0x0000000100effb68    x27: 0x0000000248b3bc00
    x28: 0x0000000000000001     fp: 0x000000016f008e60    lr: 0x00000001054bcc7c    
     sp: 0x000000016f008e30     pc: 0x00000002170cb6b0  cpsr: 0x20000000
    esr: 0x92000006            far: 0x000000001355ba20

x-detect:   setBackgroundColor: 

Binary Images:
0x100fe4000 - 0x1061abfff  MainProject arm64 &amp;lt;1f27f974e5bc3d709885c2a614886aba&amp;gt; /private/var/containers/Bundle/Application/C1317DCE-EF83-4FB6-A722-B483B3951961/QQ.app/Frameworks/MainProject.framework/MainProject
0x109188000 - 0x10ab97fff  TlibDy arm64 &amp;lt;c80a1bc104f6361e9d46b12ef6a44e06&amp;gt; /private/var/containers/Bundle/Application/C1317DCE-EF83-4FB6-A722-B483B3951961/QQ.app/Frameworks/TlibDy.framework/TlibDy
0x217ab6000 - 0x217ac0fff  libsystem_pthread.dylib arm64e &amp;lt;829ee40698373e81aab436c9f70b6726&amp;gt; /usr/lib/system/libsystem_pthread.dylib
0x217a1d000 - 0x217a48fff  libsystem_kernel.dylib arm64e &amp;lt;f2a2738e22e8381ebef30a0556212114&amp;gt; /usr/lib/system/libsystem_kernel.dylib
0x2178f4000 - 0x21791efff  libdyld.dylib arm64e &amp;lt;5666efd3f0dd3b1cae0b0fac7e92121c&amp;gt; /usr/lib/system/libdyld.dylib
0x217941000 - 0x2179c0fff  libsystem_c.dylib arm64e &amp;lt;75ac4c9d5bee3060b6da8cfa1bddb2a2&amp;gt; /usr/lib/system/libsystem_c.dylib
0x2170ae000 - 0x217835fff  libobjc.A.dylib arm64e &amp;lt;e8055992eb2530e0b15a82af9bd334e4&amp;gt; /usr/lib/libobjc.A.dylib
0x217041000 - 0x217099fff  libc++.1.dylib arm64e &amp;lt;d4063e21f493336286465788ebae505b&amp;gt; /usr/lib/libc++.1.dylib
0x217d91000 - 0x2180f4fff  CoreFoundation arm64e &amp;lt;23157e07bf733823ba6d1816915ffece&amp;gt; /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
0x218812000 - 0x218b0cfff  Foundation arm64e &amp;lt;fc334924845d3e44a4aab11d9af6cdef&amp;gt; /System/Library/Frameworks/Foundation.framework/Foundation
0x21845a000 - 0x218811fff  CFNetwork arm64e &amp;lt;7bac5947136d32178a2c8ba7bb9ed387&amp;gt; /System/Library/Frameworks/CFNetwork.framework/CFNetwork
0x21a06f000 - 0x21a081fff  GraphicsServices arm64e &amp;lt;76e795a126ce361ebb0ce1a8b674bddb&amp;gt; /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices
0x2449de000 - 0x245b1dfff  UIKitCore arm64e &amp;lt;19fd9883fb333736aa548b4f3b4a1958&amp;gt; /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
0x21f15f000 - 0x21fe97fff  JavaScriptCore arm64e &amp;lt;8f2ae7aacd1236018362df5ae43e0d5e&amp;gt; /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore
0x220957000 - 0x2223b1fff  WebCore arm64e &amp;lt;1763a71221433e1a8220577707d6f002&amp;gt; /System/Library/PrivateFrameworks/WebCore.framework/WebCore
0x21ddf8000 - 0x21deedfff  AVFAudio arm64e &amp;lt;f68c9dba3bad38dfbf4a959b06253505&amp;gt; /System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/AVFAudio
0x21d86b000 - 0x21da8efff  CoreMotion arm64e &amp;lt;457d54813e293412939c0799ab6e0658&amp;gt; /System/Library/Frameworks/CoreMotion.framework/CoreMotion
0x22c07a000 - 0x22c4c4fff  SceneKit arm64e &amp;lt;a339b467eda639b6818b5a517aaf0aa9&amp;gt; /System/Library/Frameworks/SceneKit.framework/SceneKit
0x21a081fff  GraphicsServices arm64e &amp;lt;76e795a126ce361ebb0ce1a8b674bddb&amp;gt; /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices
0x2449de000 - 0x245b1dfff  UIKitCore arm64e &amp;lt;19fd9883fb333736aa548b4f3b4a1958&amp;gt; /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore
0x21f15f000 - 0x21fe97fff  JavaScriptCore arm64e &amp;lt;8f2ae7aacd1236018362df5ae43e0d5e&amp;gt; /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore
0x220957000 - 0x2223b1fff  WebCore arm64e &amp;lt;1763a71221433e1a8220577707d6f002&amp;gt; /System/Library/PrivateFrameworks/WebCore.framework/WebCore
0x21ddf8000 - 0x21deedfff  AVFAudio arm64e &amp;lt;f68c9dba3bad38dfbf4a959b06253505&amp;gt; /System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/AVFAudio
0x21d86b000 - 0x21da8efff  CoreMotion arm64e &amp;lt;457d54813e293412939c0799ab6e0658&amp;gt; /System/Library/Frameworks/CoreMo
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dsym&#34;&gt;DSYM&lt;/h2&gt;
&lt;p&gt;知道了寄存器的值还不够，寄存器中如果存储基础类型可以直接读取，但寄存器一般存储的都是对象的地址，或是方法的地址。如何符号化。那么就要用到 DSYM（debug symbol） &amp;amp; atos。这部分也可自行google使用。使用命令大致贴一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Binary Images:
0x100fe4000 - 0x1061abfff  MainProject arm64 &amp;lt;1f27f974e5bc3d709885c2a614886aba&amp;gt; /private/var/containers/Bundle/Application/C1317DCE-EF83-4FB6-A722-B483B3951961/QQ.app/Frameworks/MainProject.framework/MainProject  //Crash APP 版本的UUID

dwarfdump --uuid Your.app.dSYM //DSYM的UUID
两个对比确保一致性。

atos -o yourAppName.app.dSYM/Contents/Resources/DWARF/yourAppName -arch arm64/armv7 -l &amp;lt;load-address&amp;gt; &amp;lt;address&amp;gt;
//翻译堆栈命令
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述只能符号化非系统的代码段地址，系统库地址的符号化要通过对应系统版本和架构的符号表得出。&lt;/p&gt;
&lt;h2 id=&#34;尾调优化&#34;&gt;尾调优化&lt;/h2&gt;
&lt;p&gt;crash的堆栈有时并不像实际代码调用情况，这其中一个原因是尾调优化（其他原因暂未找到请各位赐教）。尾调优化内容可以参考：
&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/04/tail-call.html&#34;&gt;尾调优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尾调用优化的本质就是栈帧的复用。
函数调用的过程：函数调用会在内存中申请一块“栈帧”，保存调用的地址和内部变量等信息。如果函数A内部调用函数B，那么在函数A的栈帧上就会加上一个函数B的栈帧。
如果函数B再调用了函数C，那么函数A的栈帧上就会有序加上函数B和函数C的栈帧。如果C运行结束了，返回到函数B，C的栈帧才会消失。&lt;/p&gt;
&lt;p&gt;尾调用优化的条件有三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尾调用函数不需要访问当前栈帧中的变量。（变量是形参可以，变量是实参不行）&lt;/li&gt;
&lt;li&gt;尾调用返回后，函数没有语句需要执行。（最后一步仅仅只能执行一个函数）&lt;/li&gt;
&lt;li&gt;尾调用结果就是函数的返回值。（不能有别的“附加品”，最后一步仅仅只能是执行一个函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实战分析&#34;&gt;实战分析&lt;/h2&gt;
&lt;h3 id=&#34;1现网出现crash堆栈如下&#34;&gt;1.现网出现crash堆栈如下&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;0 libobjc.A.dylib 0x00000001cee7f6b0 objc_msgSend + 16
1 Foundation 0x00000001d06db110 ___57-[NSNotificationCenter addObserver:selector:name:object:]_block_invoke_2 + 16
2 CoreFoundation 0x00000001cfbd11d0 ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 16
3 CoreFoundation 0x00000001cfbd1190 ____CFXRegistrationPost_block_invoke + 56
4 CoreFoundation 0x00000001cfbd0640 __CFXRegistrationPost + 420
5 CoreFoundation 0x00000001cfbd02c0 ____CFXNotificationPost_block_invoke + 88
6 CoreFoundation 0x00000001cfb46e70 -[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1496
7 CoreFoundation 0x00000001cfbcfd70 _CFXNotificationPost + 712
8 Foundation 0x00000001d05cc6b0 -[NSNotificationCenter postNotificationName:object:userInfo:] + 68
9 MainProject 0x0000000107011eb0 -[QQThemeManager reloadCustUIAppearance:] (QQThemeManager.mm:1060)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主题切换时发送通知到业务，业务方本应释放的对象接到了通知，也就是野指针。主题通知全业务都会接收到一搜索大概有30处左右的通知，一个个排查不现实，需要定位到具体调用方。&lt;/p&gt;
&lt;h3 id=&#34;2寄存器分析&#34;&gt;2.寄存器分析&lt;/h3&gt;
&lt;p&gt;1.结合上述寄存器所代表的信息，分析出x1对应的crash方法，经过系统符号化得到方法 setBackgroundColor: 与 x-dectect 检测的方法一致，说明堆栈和寄存器信息正确。&lt;/p&gt;
&lt;p&gt;2.LR代码栈帧调用的返回地址，也就是可以定位到在哪个方法里面调用了 setBackgroundColor 方法，通过对应APP版本的DSYM分析出是登录业务的 handleThemeChange: 方法。&lt;/p&gt;
&lt;p&gt;3.分析业务代码，文件使用MRC内存管理，嗯~真香。分析几个全局变量很简单就发现了，对象的使用不当之处。初始化变量使用的autoRelease方法，对象并没有真正被self持有，一旦被使用完这个对象就彻底被释放了，在访问也会马上Crash。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>iOS图片渲染</title>
      <link>https://kuperxu.github.io/post/ios-render-process/</link>
      <pubDate>Sun, 18 Aug 2019 15:03:19 +0800</pubDate>
      
      <guid>https://kuperxu.github.io/post/ios-render-process/</guid>
      
        <description>&lt;h1 id=&#34;渲染图片到屏幕上&#34;&gt;渲染图片到屏幕上&lt;/h1&gt;
&lt;p&gt;　 每一个像素点均由三个颜色组件构成:红，蓝，绿外加一个透明度。在每个苹果产品上都有上百万个像素点需要绘制，并且需要一个稳定的FPS支撑页面的流畅度，这是一个很庞大的工作量。这是怎样一个流程？
　  iOS设备给用户视觉反馈其实都是通过QuartzCore框架来进行的，说白了，所有用户最终看到的显示界面都是图层合成的结果，而图层即是QuartzCore中的CALayer。
　通常我们所说的视图即UIView，并不是直接显示在屏幕上，而是在创建视图对象的时候视图对象会自动创建一个层，而视图对象把要显示的东西绘制在层上，待到需要显示时硬件将所有的层拷贝，然后按Z轴的高低合成最终的合成效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1767147-c057cb90b786d4ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;软件对图形处理的流程&#34;&gt;
对于这块详细的介绍请看：&lt;a href=&#34;http://objccn.io/issue-3-1/&#34;&gt;绘制像素到屏幕上&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GPU在相识像素方面起核心作用（在浮点运算方面做的很好）。它连接到CPU，在两者间有OpenGL，Core Animation 和 Core Graphics来做数据传输。上图的流程确保了图形的绘制。其次，在透明和不透明方面，当源纹理是完全不透明的情况下R = S + D * ( 1 – alpha )这个绘制公式，就不需要合成像素值，大大提高了性能通过CALayer的opaque来设置。ps:Quartz是iPhone OS的窗口服务器和描画技术的一般叫法。Core Graphics框架是Quartz的核心，也是内容描画的基本接口。Core Graphics就是调用drawRect()方法绘制上下文时候的一系列函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##离屏渲染
这个知识点需要知道&lt;strong&gt;当前屏幕渲染&lt;/strong&gt;的概念，当前屏幕渲染是指GPU在的渲染操作是在当前的屏幕缓冲区中进行渲染的。
&lt;strong&gt;离屏渲染&lt;/strong&gt;相比当前屏幕渲染，所有不在当前屏幕缓冲区进行渲染的过程都是离屏渲染，即GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。这其中有一种特殊的渲染方式就是CPU渲染。这种情况发生在当我们对UIView的DrawRect方法进行重写的情况下并在代码中用到了Core Graphics技术进行了操作，这就是&lt;strong&gt;CPU渲染&lt;/strong&gt;。整个CPU在App内同步完成，渲染得到的bitmap最后在提交给GPU进行显示。但是由于所有的Core Graphics都是线程安全的所以可以异步完成CPU渲染。
####性能
1.由于离屏渲染需要多次的上下文切换：先从当前屏幕切换到离屏进行渲染操作；渲染结束后，切换回当前屏幕将渲染完成之后的结果放到屏幕上。&lt;strong&gt;上下文切换的代价相当大！！！&lt;/strong&gt;
2.离屏渲染需要新建一个缓冲区！&lt;/p&gt;
&lt;p&gt;设置了下面的CALayer属性都会触发离屏绘制：
shouldRasterize（光栅化）
masks（遮罩）
shadows（阴影）
edge antialiasing（抗锯齿）
group opacity（不透明）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看到了这个masks很容易就让我想到了我们经常用的设置圆角的makeToMasks属性。嘿嘿,性能低下吧，那接下来就来高效的设置一个圆角图形。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##高效设置圆角图形
在UIImage中添加一个类别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
-(UIImage *)jg_drawRadius:(CGFloat)radius size:(CGSize) sizetoFit{
    CGRect rect = CGRectMake(0, 0, sizetoFit.width, sizetoFit.height);//图形大小
    UIGraphicsBeginImageContextWithOptions(rect.size,false,[UIScreen mainScreen].scale);//绘制图形按尺寸，透明，比例
    
    CGContextAddPath(UIGraphicsGetCurrentContext(),[UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)].CGPath);//添加路径
    
    CGContextClip(UIGraphicsGetCurrentContext());//裁剪内容
    
    [self drawInRect:rect];
    
    CGContextDrawPath(UIGraphicsGetCurrentContext(), kCGPathFillStroke);
    UIImage *output = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return output;
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;针对于这种方法就是一定要注意这个图片的背景色不能随意设置因为在这种方法中我们刻意的避免的masks的使用，就是避免了离屏渲染，所以如果有背景色还是会影响视觉效果！core animation也不会变黄哦！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##FPS
&lt;strong&gt;查看自己应用程序是否卡顿&amp;ndash;FPS&lt;/strong&gt;
1.自带工具Profile的Core Animation。查看FPS
2.通过CADisplayLink&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：frameInterval的固定值为1，表示是一秒钟刷新60帧。duration是一帧维持的时间。CADisplayLink相比NSTimer的区别是，前者调用方法时间一定，而且相当精准。后者调用会受到runtime的繁忙程度影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###CADisplayLink
首先它是一个定时器，需要我们手动加入到runloop。本质上和NSTimer是一样的。但是他不同的是每次频率刷新的时候会调用方法。the selector on the target is called when the screen’s contents need to be updated.调用方法target中可以使用timestamp（时间戳）来计算FPS。可以通过时间戳的插值这样计算&lt;code&gt;1/（timestamp1-timestamp2）&lt;/code&gt;计算但是由于timestamp1-timestamp2差值很小不易计算一般通过count多计算几次这样计算&lt;code&gt;count/（timestamp1-timestamp(n)）&lt;/code&gt;&amp;ndash;相当精准。
可以参考一个很好的源码:&lt;a href=&#34;https://github.com/jvjishou/FHHFPSIndicator&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
